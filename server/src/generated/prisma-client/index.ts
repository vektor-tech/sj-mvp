// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  entry: (where?: EntryWhereInput) => Promise<boolean>;
  journalEntry: (where?: JournalEntryWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  entry: (where: EntryWhereUniqueInput) => EntryPromise;
  entries: (
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Entry>;
  entriesConnection: (
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EntryConnectionPromise;
  journalEntries: (
    args?: {
      where?: JournalEntryWhereInput;
      orderBy?: JournalEntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<JournalEntry>;
  journalEntriesConnection: (
    args?: {
      where?: JournalEntryWhereInput;
      orderBy?: JournalEntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => JournalEntryConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagPromise;
  tags: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Tag>;
  tagsConnection: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEntry: (data: EntryCreateInput) => EntryPromise;
  updateEntry: (
    args: { data: EntryUpdateInput; where: EntryWhereUniqueInput }
  ) => EntryPromise;
  updateManyEntries: (
    args: { data: EntryUpdateManyMutationInput; where?: EntryWhereInput }
  ) => BatchPayloadPromise;
  upsertEntry: (
    args: {
      where: EntryWhereUniqueInput;
      create: EntryCreateInput;
      update: EntryUpdateInput;
    }
  ) => EntryPromise;
  deleteEntry: (where: EntryWhereUniqueInput) => EntryPromise;
  deleteManyEntries: (where?: EntryWhereInput) => BatchPayloadPromise;
  createJournalEntry: (data: JournalEntryCreateInput) => JournalEntryPromise;
  updateManyJournalEntries: (
    args: {
      data: JournalEntryUpdateManyMutationInput;
      where?: JournalEntryWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyJournalEntries: (
    where?: JournalEntryWhereInput
  ) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (
    args: { data: TagUpdateInput; where: TagWhereUniqueInput }
  ) => TagPromise;
  updateManyTags: (
    args: { data: TagUpdateManyMutationInput; where?: TagWhereInput }
  ) => BatchPayloadPromise;
  upsertTag: (
    args: {
      where: TagWhereUniqueInput;
      create: TagCreateInput;
      update: TagUpdateInput;
    }
  ) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  entry: (
    where?: EntrySubscriptionWhereInput
  ) => EntrySubscriptionPayloadSubscription;
  journalEntry: (
    where?: JournalEntrySubscriptionWhereInput
  ) => JournalEntrySubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "productivityLevel_ASC"
  | "productivityLevel_DESC"
  | "color_ASC"
  | "color_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PRODUCTIVITY_LEVEL = "ONE" | "TWO" | "THREE" | "FOUR" | "FIVE";

export type JournalEntryOrderByInput =
  | "productivityLevel_ASC"
  | "productivityLevel_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EntryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "body_ASC"
  | "body_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "mobile_no_ASC"
  | "mobile_no_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export type EntryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface JournalEntryUpdateManyWithoutAuthorInput {
  create?:
    | JournalEntryCreateWithoutAuthorInput[]
    | JournalEntryCreateWithoutAuthorInput;
  deleteMany?: JournalEntryScalarWhereInput[] | JournalEntryScalarWhereInput;
  updateMany?:
    | JournalEntryUpdateManyWithWhereNestedInput[]
    | JournalEntryUpdateManyWithWhereNestedInput;
}

export interface JournalEntryWhereInput {
  entry?: EntryWhereInput;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  productivityLevel_not?: PRODUCTIVITY_LEVEL;
  productivityLevel_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  productivityLevel_not_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  author?: UserWhereInput;
  AND?: JournalEntryWhereInput[] | JournalEntryWhereInput;
  OR?: JournalEntryWhereInput[] | JournalEntryWhereInput;
  NOT?: JournalEntryWhereInput[] | JournalEntryWhereInput;
}

export interface JournalEntryScalarWhereInput {
  productivityLevel?: PRODUCTIVITY_LEVEL;
  productivityLevel_not?: PRODUCTIVITY_LEVEL;
  productivityLevel_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  productivityLevel_not_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  AND?: JournalEntryScalarWhereInput[] | JournalEntryScalarWhereInput;
  OR?: JournalEntryScalarWhereInput[] | JournalEntryScalarWhereInput;
  NOT?: JournalEntryScalarWhereInput[] | JournalEntryScalarWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  mobile_no?: String;
  mobile_no_not?: String;
  mobile_no_in?: String[] | String;
  mobile_no_not_in?: String[] | String;
  mobile_no_lt?: String;
  mobile_no_lte?: String;
  mobile_no_gt?: String;
  mobile_no_gte?: String;
  mobile_no_contains?: String;
  mobile_no_not_contains?: String;
  mobile_no_starts_with?: String;
  mobile_no_not_starts_with?: String;
  mobile_no_ends_with?: String;
  mobile_no_not_ends_with?: String;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  journal_every?: JournalEntryWhereInput;
  journal_some?: JournalEntryWhereInput;
  journal_none?: JournalEntryWhereInput;
  planner_every?: EntryWhereInput;
  planner_some?: EntryWhereInput;
  planner_none?: EntryWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface EntryCreateOneInput {
  create?: EntryCreateInput;
  connect?: EntryWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutPlannerInput {
  create?: UserCreateWithoutPlannerInput;
  update?: UserUpdateWithoutPlannerDataInput;
  upsert?: UserUpsertWithoutPlannerInput;
  connect?: UserWhereUniqueInput;
}

export interface EntryCreateManyWithoutAuthorInput {
  create?: EntryCreateWithoutAuthorInput[] | EntryCreateWithoutAuthorInput;
  connect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
}

export interface JournalEntryUpdateManyWithWhereNestedInput {
  where: JournalEntryScalarWhereInput;
  data: JournalEntryUpdateManyDataInput;
}

export interface EntryCreateWithoutAuthorInput {
  body: String;
  start: DateTimeInput;
  end: DateTimeInput;
  tags?: TagCreateManyInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateOneWithoutPlannerInput {
  create?: UserCreateWithoutPlannerInput;
  connect?: UserWhereUniqueInput;
}

export interface JournalEntrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: JournalEntryWhereInput;
  AND?:
    | JournalEntrySubscriptionWhereInput[]
    | JournalEntrySubscriptionWhereInput;
  OR?:
    | JournalEntrySubscriptionWhereInput[]
    | JournalEntrySubscriptionWhereInput;
  NOT?:
    | JournalEntrySubscriptionWhereInput[]
    | JournalEntrySubscriptionWhereInput;
}

export interface UserCreateWithoutPlannerInput {
  name: String;
  mobile_no: String;
  dob: DateTimeInput;
  email: String;
  password: String;
  tags?: TagCreateManyWithoutAuthorInput;
  journal?: JournalEntryCreateManyWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  mobile_no?: String;
  dob?: DateTimeInput;
  email?: String;
  password?: String;
}

export interface TagCreateManyWithoutAuthorInput {
  create?: TagCreateWithoutAuthorInput[] | TagCreateWithoutAuthorInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface UserCreateInput {
  name: String;
  mobile_no: String;
  dob: DateTimeInput;
  email: String;
  password: String;
  tags?: TagCreateManyWithoutAuthorInput;
  journal?: JournalEntryCreateManyWithoutAuthorInput;
  planner?: EntryCreateManyWithoutAuthorInput;
}

export interface TagCreateWithoutAuthorInput {
  name: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
}

export interface TagUpdateInput {
  name?: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
  author?: UserUpdateOneRequiredWithoutTagsInput;
}

export interface EntryUpdateInput {
  body?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  tags?: TagUpdateManyInput;
  author?: UserUpdateOneRequiredWithoutPlannerInput;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TagUpdateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  update?:
    | TagUpdateWithWhereUniqueNestedInput[]
    | TagUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TagUpsertWithWhereUniqueNestedInput[]
    | TagUpsertWithWhereUniqueNestedInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  deleteMany?: TagScalarWhereInput[] | TagScalarWhereInput;
  updateMany?:
    | TagUpdateManyWithWhereNestedInput[]
    | TagUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutJournalInput {
  create?: UserCreateWithoutJournalInput;
  connect?: UserWhereUniqueInput;
}

export interface TagUpdateWithWhereUniqueWithoutAuthorInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutAuthorDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  mobile_no?: String;
  email?: String;
}>;

export interface TagUpdateDataInput {
  name?: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
  author?: UserUpdateOneRequiredWithoutTagsInput;
}

export interface UserUpsertWithoutPlannerInput {
  update: UserUpdateWithoutPlannerDataInput;
  create: UserCreateWithoutPlannerInput;
}

export interface UserUpdateOneRequiredWithoutTagsInput {
  create?: UserCreateWithoutTagsInput;
  update?: UserUpdateWithoutTagsDataInput;
  upsert?: UserUpsertWithoutTagsInput;
  connect?: UserWhereUniqueInput;
}

export interface TagUpdateWithoutAuthorDataInput {
  name?: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
}

export interface UserUpdateWithoutTagsDataInput {
  name?: String;
  mobile_no?: String;
  dob?: DateTimeInput;
  email?: String;
  password?: String;
  journal?: JournalEntryUpdateManyWithoutAuthorInput;
  planner?: EntryUpdateManyWithoutAuthorInput;
}

export interface EntryCreateInput {
  body: String;
  start: DateTimeInput;
  end: DateTimeInput;
  tags?: TagCreateManyInput;
  author: UserCreateOneWithoutPlannerInput;
}

export interface EntryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  author?: UserWhereInput;
  AND?: EntryWhereInput[] | EntryWhereInput;
  OR?: EntryWhereInput[] | EntryWhereInput;
  NOT?: EntryWhereInput[] | EntryWhereInput;
}

export interface TagCreateInput {
  name: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
  author: UserCreateOneWithoutTagsInput;
}

export interface TagUpdateManyWithoutAuthorInput {
  create?: TagCreateWithoutAuthorInput[] | TagCreateWithoutAuthorInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  update?:
    | TagUpdateWithWhereUniqueWithoutAuthorInput[]
    | TagUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | TagUpsertWithWhereUniqueWithoutAuthorInput[]
    | TagUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: TagScalarWhereInput[] | TagScalarWhereInput;
  updateMany?:
    | TagUpdateManyWithWhereNestedInput[]
    | TagUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutTagsInput {
  name: String;
  mobile_no: String;
  dob: DateTimeInput;
  email: String;
  password: String;
  journal?: JournalEntryCreateManyWithoutAuthorInput;
  planner?: EntryCreateManyWithoutAuthorInput;
}

export interface UserUpdateWithoutPlannerDataInput {
  name?: String;
  mobile_no?: String;
  dob?: DateTimeInput;
  email?: String;
  password?: String;
  tags?: TagUpdateManyWithoutAuthorInput;
  journal?: JournalEntryUpdateManyWithoutAuthorInput;
}

export interface JournalEntryCreateWithoutAuthorInput {
  entry: EntryCreateOneInput;
  productivityLevel?: PRODUCTIVITY_LEVEL;
}

export interface JournalEntryUpdateManyDataInput {
  productivityLevel?: PRODUCTIVITY_LEVEL;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TagWhereInput;
  AND?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  OR?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  NOT?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
}

export interface EntryUpdateManyWithoutAuthorInput {
  create?: EntryCreateWithoutAuthorInput[] | EntryCreateWithoutAuthorInput;
  delete?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  connect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  disconnect?: EntryWhereUniqueInput[] | EntryWhereUniqueInput;
  update?:
    | EntryUpdateWithWhereUniqueWithoutAuthorInput[]
    | EntryUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | EntryUpsertWithWhereUniqueWithoutAuthorInput[]
    | EntryUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: EntryScalarWhereInput[] | EntryScalarWhereInput;
  updateMany?:
    | EntryUpdateManyWithWhereNestedInput[]
    | EntryUpdateManyWithWhereNestedInput;
}

export interface UserUpdateInput {
  name?: String;
  mobile_no?: String;
  dob?: DateTimeInput;
  email?: String;
  password?: String;
  tags?: TagUpdateManyWithoutAuthorInput;
  journal?: JournalEntryUpdateManyWithoutAuthorInput;
  planner?: EntryUpdateManyWithoutAuthorInput;
}

export interface EntryUpdateWithWhereUniqueWithoutAuthorInput {
  where: EntryWhereUniqueInput;
  data: EntryUpdateWithoutAuthorDataInput;
}

export interface JournalEntryUpdateManyMutationInput {
  productivityLevel?: PRODUCTIVITY_LEVEL;
}

export interface EntryUpdateWithoutAuthorDataInput {
  body?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
  tags?: TagUpdateManyInput;
}

export interface JournalEntryCreateInput {
  entry: EntryCreateOneInput;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  author: UserCreateOneWithoutJournalInput;
}

export interface EntryUpsertWithWhereUniqueWithoutAuthorInput {
  where: EntryWhereUniqueInput;
  update: EntryUpdateWithoutAuthorDataInput;
  create: EntryCreateWithoutAuthorInput;
}

export interface TagUpsertWithWhereUniqueWithoutAuthorInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutAuthorDataInput;
  create: TagCreateWithoutAuthorInput;
}

export interface EntryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  AND?: EntryScalarWhereInput[] | EntryScalarWhereInput;
  OR?: EntryScalarWhereInput[] | EntryScalarWhereInput;
  NOT?: EntryScalarWhereInput[] | EntryScalarWhereInput;
}

export interface TagCreateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface EntryUpdateManyWithWhereNestedInput {
  where: EntryScalarWhereInput;
  data: EntryUpdateManyDataInput;
}

export interface JournalEntryCreateManyWithoutAuthorInput {
  create?:
    | JournalEntryCreateWithoutAuthorInput[]
    | JournalEntryCreateWithoutAuthorInput;
}

export interface EntryUpdateManyDataInput {
  body?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface EntrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EntryWhereInput;
  AND?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
  OR?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
  NOT?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
}

export interface UserUpsertWithoutTagsInput {
  update: UserUpdateWithoutTagsDataInput;
  create: UserCreateWithoutTagsInput;
}

export interface UserCreateWithoutJournalInput {
  name: String;
  mobile_no: String;
  dob: DateTimeInput;
  email: String;
  password: String;
  tags?: TagCreateManyWithoutAuthorInput;
  planner?: EntryCreateManyWithoutAuthorInput;
}

export interface TagUpdateManyDataInput {
  name?: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  productivityLevel_not?: PRODUCTIVITY_LEVEL;
  productivityLevel_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  productivityLevel_not_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  color?: String;
  color_not?: String;
  color_in?: String[] | String;
  color_not_in?: String[] | String;
  color_lt?: String;
  color_lte?: String;
  color_gt?: String;
  color_gte?: String;
  color_contains?: String;
  color_not_contains?: String;
  color_starts_with?: String;
  color_not_starts_with?: String;
  color_ends_with?: String;
  color_not_ends_with?: String;
  AND?: TagScalarWhereInput[] | TagScalarWhereInput;
  OR?: TagScalarWhereInput[] | TagScalarWhereInput;
  NOT?: TagScalarWhereInput[] | TagScalarWhereInput;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface UserCreateOneWithoutTagsInput {
  create?: UserCreateWithoutTagsInput;
  connect?: UserWhereUniqueInput;
}

export interface EntryUpdateManyMutationInput {
  body?: String;
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface TagUpdateManyMutationInput {
  name?: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
}

export interface TagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  productivityLevel_not?: PRODUCTIVITY_LEVEL;
  productivityLevel_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  productivityLevel_not_in?: PRODUCTIVITY_LEVEL[] | PRODUCTIVITY_LEVEL;
  color?: String;
  color_not?: String;
  color_in?: String[] | String;
  color_not_in?: String[] | String;
  color_lt?: String;
  color_lte?: String;
  color_gt?: String;
  color_gte?: String;
  color_contains?: String;
  color_not_contains?: String;
  color_starts_with?: String;
  color_not_starts_with?: String;
  color_ends_with?: String;
  color_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: TagWhereInput[] | TagWhereInput;
  OR?: TagWhereInput[] | TagWhereInput;
  NOT?: TagWhereInput[] | TagWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  mobile_no: String;
  dob: DateTimeOutput;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  mobile_no: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  mobile_no: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEntry {
  count: Int;
}

export interface AggregateEntryPromise
  extends Promise<AggregateEntry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEntrySubscription
  extends Promise<AsyncIterator<AggregateEntry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Tag {
  id: ID_Output;
  name: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  productivityLevel: () => Promise<PRODUCTIVITY_LEVEL>;
  color: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  productivityLevel: () => Promise<AsyncIterator<PRODUCTIVITY_LEVEL>>;
  color: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface EntryEdge {
  node: Entry;
  cursor: String;
}

export interface EntryEdgePromise extends Promise<EntryEdge>, Fragmentable {
  node: <T = EntryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EntryEdgeSubscription
  extends Promise<AsyncIterator<EntryEdge>>,
    Fragmentable {
  node: <T = EntrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  mobile_no: String;
  dob: DateTimeOutput;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  mobile_no: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tags: <T = FragmentableArray<Tag>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  journal: <T = FragmentableArray<JournalEntry>>(
    args?: {
      where?: JournalEntryWhereInput;
      orderBy?: JournalEntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  planner: <T = FragmentableArray<Entry>>(
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  mobile_no: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  journal: <T = Promise<AsyncIterator<JournalEntrySubscription>>>(
    args?: {
      where?: JournalEntryWhereInput;
      orderBy?: JournalEntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  planner: <T = Promise<AsyncIterator<EntrySubscription>>>(
    args?: {
      where?: EntryWhereInput;
      orderBy?: EntryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
  productivityLevel?: PRODUCTIVITY_LEVEL;
  color?: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  productivityLevel: () => Promise<PRODUCTIVITY_LEVEL>;
  color: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  productivityLevel: () => Promise<AsyncIterator<PRODUCTIVITY_LEVEL>>;
  color: () => Promise<AsyncIterator<String>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Entry {
  id: ID_Output;
  body: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface EntryPromise extends Promise<Entry>, Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  tags: <T = FragmentableArray<Tag>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserPromise>() => T;
}

export interface EntrySubscription
  extends Promise<AsyncIterator<Entry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserSubscription>() => T;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface EntrySubscriptionPayload {
  mutation: MutationType;
  node: Entry;
  updatedFields: String[];
  previousValues: EntryPreviousValues;
}

export interface EntrySubscriptionPayloadPromise
  extends Promise<EntrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EntryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EntryPreviousValuesPromise>() => T;
}

export interface EntrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EntrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EntrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EntryPreviousValuesSubscription>() => T;
}

export interface JournalEntryEdge {
  node: JournalEntry;
  cursor: String;
}

export interface JournalEntryEdgePromise
  extends Promise<JournalEntryEdge>,
    Fragmentable {
  node: <T = JournalEntryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JournalEntryEdgeSubscription
  extends Promise<AsyncIterator<JournalEntryEdge>>,
    Fragmentable {
  node: <T = JournalEntrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface JournalEntryPreviousValues {
  productivityLevel?: PRODUCTIVITY_LEVEL;
}

export interface JournalEntryPreviousValuesPromise
  extends Promise<JournalEntryPreviousValues>,
    Fragmentable {
  productivityLevel: () => Promise<PRODUCTIVITY_LEVEL>;
}

export interface JournalEntryPreviousValuesSubscription
  extends Promise<AsyncIterator<JournalEntryPreviousValues>>,
    Fragmentable {
  productivityLevel: () => Promise<AsyncIterator<PRODUCTIVITY_LEVEL>>;
}

export interface JournalEntrySubscriptionPayload {
  mutation: MutationType;
  node: JournalEntry;
  updatedFields: String[];
  previousValues: JournalEntryPreviousValues;
}

export interface JournalEntrySubscriptionPayloadPromise
  extends Promise<JournalEntrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JournalEntryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JournalEntryPreviousValuesPromise>() => T;
}

export interface JournalEntrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JournalEntrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JournalEntrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JournalEntryPreviousValuesSubscription>() => T;
}

export interface EntryConnection {
  pageInfo: PageInfo;
  edges: EntryEdge[];
}

export interface EntryConnectionPromise
  extends Promise<EntryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EntryEdge>>() => T;
  aggregate: <T = AggregateEntryPromise>() => T;
}

export interface EntryConnectionSubscription
  extends Promise<AsyncIterator<EntryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EntryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEntrySubscription>() => T;
}

export interface EntryPreviousValues {
  id: ID_Output;
  body: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface EntryPreviousValuesPromise
  extends Promise<EntryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  body: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface EntryPreviousValuesSubscription
  extends Promise<AsyncIterator<EntryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  body: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface JournalEntry {
  productivityLevel?: PRODUCTIVITY_LEVEL;
}

export interface JournalEntryPromise
  extends Promise<JournalEntry>,
    Fragmentable {
  entry: <T = EntryPromise>() => T;
  productivityLevel: () => Promise<PRODUCTIVITY_LEVEL>;
  author: <T = UserPromise>() => T;
}

export interface JournalEntrySubscription
  extends Promise<AsyncIterator<JournalEntry>>,
    Fragmentable {
  entry: <T = EntrySubscription>() => T;
  productivityLevel: () => Promise<AsyncIterator<PRODUCTIVITY_LEVEL>>;
  author: <T = UserSubscription>() => T;
}

export interface JournalEntryConnection {
  pageInfo: PageInfo;
  edges: JournalEntryEdge[];
}

export interface JournalEntryConnectionPromise
  extends Promise<JournalEntryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JournalEntryEdge>>() => T;
  aggregate: <T = AggregateJournalEntryPromise>() => T;
}

export interface JournalEntryConnectionSubscription
  extends Promise<AsyncIterator<JournalEntryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JournalEntryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJournalEntrySubscription>() => T;
}

export interface AggregateJournalEntry {
  count: Int;
}

export interface AggregateJournalEntryPromise
  extends Promise<AggregateJournalEntry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJournalEntrySubscription
  extends Promise<AsyncIterator<AggregateJournalEntry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Entry",
    embedded: false
  },
  {
    name: "JournalEntry",
    embedded: false
  },
  {
    name: "PRODUCTIVITY_LEVEL",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
